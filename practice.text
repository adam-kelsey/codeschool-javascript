Wanted to post question and answer, but I think it would be illegal since its a paid course. Just posting my attempts/answers.

This is the codeschool course, I know it is starting off too basic but its a good review and will move into more difficult things.



Javascript arrays

1.
list[3] = 4

2.
var list = [1, 2, 3, 4, 5, 6, 7, 8, 9]
list.push(10)

3.
A-
var values = ["string", 1, true];

4.
values.pop = var bool[]
var bool = values.pop()

5.
var infant = eightiesMovies[1, 4]
var infant = eightiesMovies[1][4]

6.
alert(eightiesMovies[0][0] + " " + eightiesMovies[0][1]);

7.
function numStrings(list) {
  var count = 0
  for (var i = 0; i < list.length; i++) {
    if (typeof(list)[i] == "string" ) {
      count++;
    };
  };
  return count;
};



Function Expressions

1.
(showing the difference between anonymous functions and function declarations)
var runAway = function () {
  var toAlert = "";
  for (var i = 0; i < 5; i++) {
    toAlert = toAlert + "Lions, Tigers, and Bears, Oh My!!\n";
  }
  alert(toAlert); (anonymous function stored in a variable, with a semi colon)
};

2.
storing the results of the function as a variable

var people = 3;
var rain = 4;
var sharks = 5;

var fearGenerated = function(numPeeps, rainInInches, numSharks) {
  var rainFear = numPeeps * rainInInches;
  var sharkFear = numSharks * numSharks * numSharks;
  var totalFear = sharkFear + rainFear;
  return totalFear;
};
var fear = fearGenerated(people, rain, sharks);

3.
(I guess this is just showing you can view the contents of your function without using it?)
alert(fearGenerated);

4.
var fear = fearGenerated(numPeeps, rainInInches, numSharks);

var fearMessage = function() {
  if (fear < 200) {
    return confirm("Fear Level: LOW\nStill wanna ride?");
  } else if (fear >= 200 && fear <= 300) {
    return confirm("Fear Level: MEDIUM\nThink you'll make it?");
  } 
};

function confirmRide(confirmToGo) {
  return confirmToGo();
}

var startRide = confirmRide(fearMessage);




Function expressions with arrays!
1.
var passengers = [ ["Thomas", "Meeks"],
                   ["Gregg", "Pollack"],
                   ["Christine", "Wong"],
                   ["Dan", "McGaw"] ];
var modifiedNames = passengers.map(function(arrayCell) {
  return arrayCell[0] + " " + arrayCell[1];
});

2.
var modifiedNames = [ "Thomas Meeks",
                      "Gregg Pollack",
                      "Christine Wong",
                      "Dan McGaw" ];
modifiedNames.map (function (arrayCell) { alert("Yo, " + arrayCell + "!");});

3.
var puzzlers = [
  function(a) { return 3 * a - 8; },
  function(a) { return (a + 2) * (a + 2) * (a + 2); },
  function(a) { return a*a - 9; },
  function(a) { return a % 4; }
  ];

4. Anonymous functions!
function adventureSelector(userChoice) {
  if (userChoice == 1) {
    return function() {
      alert("You selected the Vines of Doom!");
    };
  } else if (userChoice == 2) {
      return function() {
        alert("Looks like you want the Lake of Despair!");
      };
  } else if (userChoice == 3) {
    return function() {
      alert("The Caves of Catastrophe!");
    };
  }
}

5.
adventureSelector(3)();

6.
var puzzlers = [
  function (a) { return 8*a - 10; },
  function (a) { return (a-3) * (a-3) * (a-3); },
  function (a) { return a * a + 4; },
  function (a) { return a % 5; }
];
var start = 2;

var applyAndEmpty = function (input, queue) {
  var length = queue.length;
  for (var i = 0; i < length; i++) {
    input = queue.shift()(input);
  }
  return input;
};

alert(applyAndEmpty(start, puzzlers));

7.
alert(puzzlers[puzzlers[1](3)](puzzlers[3](9)));





Learning about javascript closures

1.
alert(54)
alert(54); (semicolon gets me everytime!)

2.
alert(40);

3.
alert(122);

4.
function warningMaker(obstacle) {
  return function() {
    alert("Beware! There have been " + obstacle + " sightings in the cove today!");
  };
}

5.
function warningMaker(obstacle) {
  return function() {
    alert("Beware! There have been " + obstacle + " sightings in the Cove today!");
  };
}

var icebergAlert = warningMaker("iceberg");

>> icebergAlert();







Learning about Hoisting to show load order

1.
console.log("unused1");   // wrong because when functions with the same name are hoisted, the latter is used

console.log("unused2");


2. // If i understand this correctly, the first thing that happens is the variables get moved to the top. The first functions that are named balrog and elf get overridden because the latter takes precedence. Ring = wizard and wizard = balrog is then next in line, and then returning wizard is the only return left because its not inside a function.

function theBridgeOfHoistingDoom() {
  var ring = undefined;
  var power = undefined;
  function balrog() {
    return "whip";
  }
  function wizard() {
    return "white";
  }
  function elf() {
    return "immortal";
  }
  ring = wizard;
  wizard = balrog;
  return wizard();
}


3.
function theBridgeOfHoistingDoom() {
  var sword = undefined;
  var dwarf = undefined;
  var fall = undefined;
  var ring = undefined;
  function fellowship() {
    return "friends";
  }
  sword = "sting";
  dwarf = function() {
    return "axe";
  };
  fall = "Fly you fools!";
  fellowship = function() {
    return "broken";
  };
  ring();
  return sword;
}

4.
function theBridgeOfHoistingDoom() {
  var sword = undefined;
  ...
  ...
  ...
  function fellowship() ...
  ...
  ring();
  return sword;
}

console.log("sting"); //not correct, ring(); gets hit first

console.log("error"); // whoops, forgot caps!

console.log("ERROR"); // ring is currently = undefined so ERROR is returned first




Javascript objects!
1.
var vehicle1 = { type: "Motorboat", capacity: 6, storedAt: "Ammunition Depot" };
var vehicle2 = { type: "Jet Ski", capacity: 1, storedAt: "Reef Dock" };
var vehicle2 = { type: "Submarine", capacity: 8, storedAt: "Underwater Outpost" };  // whoops, vehicle 2 written twice!

var vehicle1 = { type: "Motorboat", capacity: 6, storedAt: "Ammunition Depot" };
var vehicle2 = { type: "Jet Ski", capacity: 1, storedAt: "Reef Dock" };
var vehicle3 = { type: "Submarine", capacity: 8, storedAt: "Underwater Outpost" };


2.
Can access object values with the . method
console.log(vehicle1.capacity);


3.
var vehicle1 = {type: "Motorboat", capacity: 6, storedAt: "Ammunition Depot"};
var vehicle2 = {type: "Jet Ski", capacity: 1, storedAt: "Reef Dock"};
var vehicle3 = {type: "Submarine", capacity: 8, storedAt: "Underwater Outpost"};

var vehicles = [vehicle1, vehicle2, vehicle3];

var findVehicle = function(name, list) {
  for (var i = 0; i < list.length; i++) {
    if (list[i].type == name) {
      return list[i].storedAt;
    }
  }
};

findVehicle("Submarine", vehicles);


4.
var vehicle1 = {type: "Motorboat", capacity: 6, storedAt: "Ammunition Depot"};
var vehicle2 = {type: "Jet Ski", capacity: 1, storedAt: "Reef Dock"};
var vehicle3 = {type: "Submarine", capacity: 8, storedAt: "Underwater Outpost"};

vehicle1.capacity += 4;
vehicle2.submersible = false;
vehicle3.weapon = "Torpedoes";
vehicle1.submersible = false;
vehicle2.weapon = "Lasers";
vehicle3.capacity *= 2;
vehicle1.weapon = "Rear-Mounted Slingshot";
vehicle3.submersible = true;


5. different way to add to an object
vehicle3["# of weapons"] = 8;
vehicle2["# of weapons"] = 4;
vehicle1["# of weapons"] = 1;


6.
lighthouseRock.bulbs.delete;  // should be   delete lighthouseRock.bulbs

lighthouseRock.weaponBulbs = superBlinders;

console.log(lighthouseRock.weaponBulbs[2][0]);

7.
var superBlinders = [ ["Firestorm", 4000], ["Solar Death Ray", 6000], ["Supernova", 12000] ];

var lighthouseRock = {
  gateClosed: true,
  weaponBulbs: superBlinders,
  capacity: 30,
  secretPassageTo: "Underwater Outpost",
  numRangers: 0
};  // above this line was given code

function addRanger(location, name, skillz, station) {
  location.numRangers++;
  location["ranger" + location.numRangers] = {
    name: name,
    skillz: skillz,
    station: station
  };
}

addRanger(lighthouseRock, "Nick Walsh", "magnification burn", 2);
addRanger(lighthouseRock, "Drew Barontini", "uppercut launch", 3);
addRanger(lighthouseRock, "Christine Wong", "bomb defusing", 1);


8.
var superBlinders = [ ["Firestorm", 4000], ["Solar Death Ray", 6000], ["Supernova", 12000] ];

var lighthouseRock = {
  gateClosed: true,
  weaponBulbs: superBlinders,
  capacity: 30,
  secretPassageTo: "Underwater Outpost",
  numRangers: 3,
  ranger1: {name: "Nick Walsh", skillz: "magnification burn", station: 2},
  ranger2: {name: "Drew Barontini", skillz: "uppercut launch", station: 3},
  ranger3: {name: "Christine Wong", skillz: "bomb defusing", station: 1}
};

function dontPanic(location) {
  var list = "Avast, me hearties!\n" +
             "There be Pirates nearby! Stations!\n";


    // above was given

  for (var i = 1; i <= location.numRangers; i++) {
    list += location["ranger"+i].name + ", man the " +  location.weaponBulbs[location["ranger"+i].station-1][0] + "!\n";
  }
  alert(list);
}

dontPanic(lighthouseRock);




Introduction to "this"
1.
var superBlinders = [ ["Firestorm", 4000], ["Solar Death Ray", 6000], ["Supernova", 12000] ];

var lighthouseRock = {
  gateClosed: true,
  weaponBulbs: superBlinders,
  capacity: 30,
  secretPassageTo: "Underwater Outpost",
  numRangers: 3,
  ranger1: {name: "Nick Walsh", skillz: "magnification burn", station: 2},
  ranger2: {name: "Drew Barontini", skillz: "uppercut launch", station: 3},
  ranger3: {name: "Christine Wong", skillz: "bomb defusing", station: 1},

  //
  addRanger: function(name, skillz, station) {
    this.numRangers++;
    this["ranger" + this.numRangers] = {
      name: name,
      skillz: skillz,
      station: station
    };
  }
};

2.
addRanger("Jordan Wade", "dual-wield hand crossbow", 4);  //whoops, forgot to access the object in order to access the function

lighthouseRock.addRanger("Jordan Wade", "dual-wield hand crossbow", 4);


3.
var superBlinders = [ ["Firestorm", 4000], ["Solar Death Ray", 6000], ["Supernova", 12000] ];

var lighthouseRock = {
  gateClosed: true,
  weaponBulbs: superBlinders,
  capacity: 30,
  secretPassageTo: "Underwater Outpost",
  numRangers: 3,
  ranger1: {name: "Nick Walsh", skillz: "magnification burn", station: 2},
  ranger2: {name: "Drew Barontini", skillz: "uppercut launch", station: 3},
  ranger3: {name: "Christine Wong", skillz: "bomb defusing", station: 1},
  ranger4: {name: "Jordan Wade", skillz: "dual-wield hand crossbow", station: 4},
  addRanger: function(name, skillz, station) {
    this.numRangers++;
    this["ranger" + this.numRangers] = {
      name: name,
      skillz: skillz,
      station: station
    };
  }
};

//

lighthouseRock.addBulb = function (name, wattage) {
  this.weaponBulbs.push([name, wattage]);
};


4.
lighthouseRock.addBulb = function(name, wattage) {
  this.weaponBulbs.push([name, wattage]);
};

lighthouseRock.addBulb("Blasterbright", 5000);
lighthouseRock.addBulb("Sight Slayer", 1800);
lighthouseRock.addBulb("Burner of Souls", 7500);
